/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { PriceDataSeries } from '../../models/price-data-series';

export interface GetTradingDataTradingDataDataSymbolGet$Params {
  symbol: string;

/**
 * Data timeframe
 */
  timeframe?: (string | null);

/**
 * Start date filter
 */
  start_date?: (string | null);

/**
 * End date filter
 */
  end_date?: (string | null);

/**
 * Sort order: 'asc' or 'desc'
 */
  order_by?: string;

/**
 * Page number (1-based)
 */
  page?: number;

/**
 * Number of items per page
 */
  page_size?: number;
}

export function getTradingDataTradingDataDataSymbolGet(http: HttpClient, rootUrl: string, params: GetTradingDataTradingDataDataSymbolGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PriceDataSeries>> {
  const rb = new RequestBuilder(rootUrl, getTradingDataTradingDataDataSymbolGet.PATH, 'get');
  if (params) {
    rb.path('symbol', params.symbol, {});
    rb.query('timeframe', params.timeframe, {});
    rb.query('start_date', params.start_date, {});
    rb.query('end_date', params.end_date, {});
    rb.query('order_by', params.order_by, {});
    rb.query('page', params.page, {});
    rb.query('page_size', params.page_size, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<PriceDataSeries>;
    })
  );
}

getTradingDataTradingDataDataSymbolGet.PATH = '/trading-data/data/{symbol}';
