/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getTradingDataTradingDataDataSymbolGet } from '../fn/trading-data/get-trading-data-trading-data-data-symbol-get';
import { GetTradingDataTradingDataDataSymbolGet$Params } from '../fn/trading-data/get-trading-data-trading-data-data-symbol-get';
import { listStoredSymbolsTradingDataSymbolsGet } from '../fn/trading-data/list-stored-symbols-trading-data-symbols-get';
import { ListStoredSymbolsTradingDataSymbolsGet$Params } from '../fn/trading-data/list-stored-symbols-trading-data-symbols-get';
import { PriceDataSeries } from '../models/price-data-series';

@Injectable({ providedIn: 'root' })
export class TradingDataService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTradingDataTradingDataDataSymbolGet()` */
  static readonly GetTradingDataTradingDataDataSymbolGetPath = '/trading-data/data/{symbol}';

  /**
   * Get Trading Data.
   *
   * Retrieve stored trading data for a symbol with pagination support.
   *
   * Args:
   *     symbol: Trading symbol (e.g., AAPL, MSFT)
   *     timeframe: Data timeframe (e.g., 1min, 5min, daily)
   *     start_date: Start date filter (optional)
   *     end_date: End date filter (optional)
   *     order_by: Sort order - 'asc' for ascending, 'desc' for descending (default: desc)
   *     page: Page number (1-based, default: 1)
   *     page_size: Number of items per page (default: 1000, max: 10000)
   *
   * Returns:
   *     PriceDataSeries: Trading data for the symbol with pagination information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTradingDataTradingDataDataSymbolGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTradingDataTradingDataDataSymbolGet$Response(params: GetTradingDataTradingDataDataSymbolGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PriceDataSeries>> {
    return getTradingDataTradingDataDataSymbolGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Trading Data.
   *
   * Retrieve stored trading data for a symbol with pagination support.
   *
   * Args:
   *     symbol: Trading symbol (e.g., AAPL, MSFT)
   *     timeframe: Data timeframe (e.g., 1min, 5min, daily)
   *     start_date: Start date filter (optional)
   *     end_date: End date filter (optional)
   *     order_by: Sort order - 'asc' for ascending, 'desc' for descending (default: desc)
   *     page: Page number (1-based, default: 1)
   *     page_size: Number of items per page (default: 1000, max: 10000)
   *
   * Returns:
   *     PriceDataSeries: Trading data for the symbol with pagination information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTradingDataTradingDataDataSymbolGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTradingDataTradingDataDataSymbolGet(params: GetTradingDataTradingDataDataSymbolGet$Params, context?: HttpContext): Observable<PriceDataSeries> {
    return this.getTradingDataTradingDataDataSymbolGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PriceDataSeries>): PriceDataSeries => r.body)
    );
  }

  /** Path part for operation `listStoredSymbolsTradingDataSymbolsGet()` */
  static readonly ListStoredSymbolsTradingDataSymbolsGetPath = '/trading-data/symbols';

  /**
   * List Stored Symbols.
   *
   * List all symbols that have stored data.
   *
   * Args:
   *     timeframe: Timeframe to check for stored data
   *
   * Returns:
   *     List[str]: List of available symbol names
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listStoredSymbolsTradingDataSymbolsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listStoredSymbolsTradingDataSymbolsGet$Response(params?: ListStoredSymbolsTradingDataSymbolsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return listStoredSymbolsTradingDataSymbolsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Stored Symbols.
   *
   * List all symbols that have stored data.
   *
   * Args:
   *     timeframe: Timeframe to check for stored data
   *
   * Returns:
   *     List[str]: List of available symbol names
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listStoredSymbolsTradingDataSymbolsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listStoredSymbolsTradingDataSymbolsGet(params?: ListStoredSymbolsTradingDataSymbolsGet$Params, context?: HttpContext): Observable<Array<string>> {
    return this.listStoredSymbolsTradingDataSymbolsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

}
