/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet } from '../fn/nightly-update/get-update-details-nightly-update-status-request-id-details-get';
import { GetUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet$Params } from '../fn/nightly-update/get-update-details-nightly-update-status-request-id-details-get';
import { getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet } from '../fn/nightly-update/get-update-progress-details-nightly-update-status-request-id-progress-get';
import { GetUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet$Params } from '../fn/nightly-update/get-update-progress-details-nightly-update-status-request-id-progress-get';
import { getUpdateStatusNightlyUpdateStatusRequestIdGet } from '../fn/nightly-update/get-update-status-nightly-update-status-request-id-get';
import { GetUpdateStatusNightlyUpdateStatusRequestIdGet$Params } from '../fn/nightly-update/get-update-status-nightly-update-status-request-id-get';
import { listActiveUpdatesNightlyUpdateActiveGet } from '../fn/nightly-update/list-active-updates-nightly-update-active-get';
import { ListActiveUpdatesNightlyUpdateActiveGet$Params } from '../fn/nightly-update/list-active-updates-nightly-update-active-get';
import { NightlyUpdateResponse } from '../models/nightly-update-response';
import { startNightlyUpdateNightlyUpdateStartPost } from '../fn/nightly-update/start-nightly-update-nightly-update-start-post';
import { StartNightlyUpdateNightlyUpdateStartPost$Params } from '../fn/nightly-update/start-nightly-update-nightly-update-start-post';
import { UpdateProgressDetailsResponse } from '../models/update-progress-details-response';
import { ActiveUpdateSummary } from '../models/active-update-summary';
import { UpdateStatusResponse } from '../models/update-status-response';

@Injectable({ providedIn: 'root' })
export class NightlyUpdateService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `startNightlyUpdateNightlyUpdateStartPost()` */
  static readonly StartNightlyUpdateNightlyUpdateStartPostPath =
    '/nightly-update/start';

  /**
   * Start Nightly Update.
   *
   * Start a nightly update process for stock market data.
   *
   * This endpoint triggers the complete nightly update workflow:
   * 1. Validates existing data completeness
   * 2. Downloads missing 1-minute data
   * 3. Resamples to all target timeframes
   * 4. Returns immediately with a request ID for status tracking
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `startNightlyUpdateNightlyUpdateStartPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  startNightlyUpdateNightlyUpdateStartPost$Response(
    params: StartNightlyUpdateNightlyUpdateStartPost$Params,
    context?: HttpContext
  ): Observable<
    StrictHttpResponse<{
      [key: string]: string;
    }>
  > {
    return startNightlyUpdateNightlyUpdateStartPost(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * Start Nightly Update.
   *
   * Start a nightly update process for stock market data.
   *
   * This endpoint triggers the complete nightly update workflow:
   * 1. Validates existing data completeness
   * 2. Downloads missing 1-minute data
   * 3. Resamples to all target timeframes
   * 4. Returns immediately with a request ID for status tracking
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `startNightlyUpdateNightlyUpdateStartPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  startNightlyUpdateNightlyUpdateStartPost(
    params: StartNightlyUpdateNightlyUpdateStartPost$Params,
    context?: HttpContext
  ): Observable<{
    [key: string]: string;
  }> {
    return this.startNightlyUpdateNightlyUpdateStartPost$Response(
      params,
      context
    ).pipe(
      map(
        (
          r: StrictHttpResponse<{
            [key: string]: string;
          }>
        ): {
          [key: string]: string;
        } => r.body
      )
    );
  }

  /** Path part for operation `getUpdateStatusNightlyUpdateStatusRequestIdGet()` */
  static readonly GetUpdateStatusNightlyUpdateStatusRequestIdGetPath =
    '/nightly-update/status/{request_id}';

  /**
   * Get Update Status.
   *
   * Get the status of a nightly update request with detailed progress information.
   *
   * Args:
   *     request_id: The request ID returned from start_nightly_update
   *
   * Returns:
   *     Status information for the update request including progress details
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUpdateStatusNightlyUpdateStatusRequestIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpdateStatusNightlyUpdateStatusRequestIdGet$Response(
    params: GetUpdateStatusNightlyUpdateStatusRequestIdGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<UpdateStatusResponse>> {
    return getUpdateStatusNightlyUpdateStatusRequestIdGet(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * Get Update Status.
   *
   * Get the status of a nightly update request with detailed progress information.
   *
   * Args:
   *     request_id: The request ID returned from start_nightly_update
   *
   * Returns:
   *     Status information for the update request including progress details
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUpdateStatusNightlyUpdateStatusRequestIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpdateStatusNightlyUpdateStatusRequestIdGet(
    params: GetUpdateStatusNightlyUpdateStatusRequestIdGet$Params,
    context?: HttpContext
  ): Observable<UpdateStatusResponse> {
    return this.getUpdateStatusNightlyUpdateStatusRequestIdGet$Response(
      params,
      context
    ).pipe(
      map(
        (r: StrictHttpResponse<UpdateStatusResponse>): UpdateStatusResponse =>
          r.body
      )
    );
  }

  /** Path part for operation `getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet()` */
  static readonly GetUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGetPath =
    '/nightly-update/status/{request_id}/progress';

  /**
   * Get Update Progress Details.
   *
   * Get detailed progress information for each symbol in a nightly update request.
   *
   * Args:
   *     request_id: The request ID returned from start_nightly_update
   *
   * Returns:
   *     Detailed progress information for each symbol
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet$Response(
    params: GetUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<UpdateProgressDetailsResponse>> {
    return getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * Get Update Progress Details.
   *
   * Get detailed progress information for each symbol in a nightly update request.
   *
   * Args:
   *     request_id: The request ID returned from start_nightly_update
   *
   * Returns:
   *     Detailed progress information for each symbol
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet(
    params: GetUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet$Params,
    context?: HttpContext
  ): Observable<UpdateProgressDetailsResponse> {
    return this.getUpdateProgressDetailsNightlyUpdateStatusRequestIdProgressGet$Response(
      params,
      context
    ).pipe(
      map(
        (
          r: StrictHttpResponse<UpdateProgressDetailsResponse>
        ): UpdateProgressDetailsResponse => r.body
      )
    );
  }

  /** Path part for operation `getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet()` */
  static readonly GetUpdateDetailsNightlyUpdateStatusRequestIdDetailsGetPath =
    '/nightly-update/status/{request_id}/details';

  /**
   * Get Update Details.
   *
   * Get detailed results of a completed nightly update.
   *
   * Args:
   *     request_id: The request ID returned from start_nightly_update
   *
   * Returns:
   *     Detailed update results including per-symbol information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet$Response(
    params: GetUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<NightlyUpdateResponse>> {
    return getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * Get Update Details.
   *
   * Get detailed results of a completed nightly update.
   *
   * Args:
   *     request_id: The request ID returned from start_nightly_update
   *
   * Returns:
   *     Detailed update results including per-symbol information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet(
    params: GetUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet$Params,
    context?: HttpContext
  ): Observable<NightlyUpdateResponse> {
    return this.getUpdateDetailsNightlyUpdateStatusRequestIdDetailsGet$Response(
      params,
      context
    ).pipe(
      map(
        (r: StrictHttpResponse<NightlyUpdateResponse>): NightlyUpdateResponse =>
          r.body
      )
    );
  }

  /** Path part for operation `listActiveUpdatesNightlyUpdateActiveGet()` */
  static readonly ListActiveUpdatesNightlyUpdateActiveGetPath =
    '/nightly-update/active';

  /**
   * List Active Updates.
   *
   * List all currently active nightly update requests.
   *
   * Returns:
   *     List of active update requests with basic information
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listActiveUpdatesNightlyUpdateActiveGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listActiveUpdatesNightlyUpdateActiveGet$Response(
    params?: ListActiveUpdatesNightlyUpdateActiveGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<ActiveUpdateSummary>>> {
    return listActiveUpdatesNightlyUpdateActiveGet(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * List Active Updates.
   *
   * List all currently active nightly update requests.
   *
   * Returns:
   *     List of active update requests with basic information
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listActiveUpdatesNightlyUpdateActiveGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listActiveUpdatesNightlyUpdateActiveGet(
    params?: ListActiveUpdatesNightlyUpdateActiveGet$Params,
    context?: HttpContext
  ): Observable<Array<ActiveUpdateSummary>> {
    return this.listActiveUpdatesNightlyUpdateActiveGet$Response(
      params,
      context
    ).pipe(
      map(
        (
          r: StrictHttpResponse<Array<ActiveUpdateSummary>>
        ): Array<ActiveUpdateSummary> => r.body
      )
    );
  }
}
