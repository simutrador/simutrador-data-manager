/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { healthCheckApiV1HealthGet } from '../fn/simulation/health-check-api-v-1-health-get';
import { HealthCheckApiV1HealthGet$Params } from '../fn/simulation/health-check-api-v-1-health-get';
import { simulateTradingApiV1SimulatePost } from '../fn/simulation/simulate-trading-api-v-1-simulate-post';
import { SimulateTradingApiV1SimulatePost$Params } from '../fn/simulation/simulate-trading-api-v-1-simulate-post';
import { SimulationResponse } from '../models/simulation-response';

@Injectable({ providedIn: 'root' })
export class SimulationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `simulateTradingApiV1SimulatePost()` */
  static readonly SimulateTradingApiV1SimulatePostPath = '/api/v1/simulate';

  /**
   * Execute Trading Simulation.
   *
   * Execute a trading simulation against historical market data.
   *     
   *     This endpoint accepts a list of trading orders and simulates their execution
   *     against historical OHLCV data for the specified symbol and timeframe.
   *     
   *     The simulation uses deterministic fill logic:
   *     - Market orders are filled at the open price of the entry time bar
   *     - Limit orders are filled when price touches the entry price during or after entry time
   *     - Stop loss and take profit levels are evaluated in candle order (first touch wins)
   *     - Orders that don't meet entry conditions within the simulation window are discarded
   *     
   *     Returns detailed execution results including individual trade outcomes and
   *     performance metrics such as win rate, total PnL, and maximum drawdown.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `simulateTradingApiV1SimulatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  simulateTradingApiV1SimulatePost$Response(params: SimulateTradingApiV1SimulatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<SimulationResponse>> {
    return simulateTradingApiV1SimulatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Execute Trading Simulation.
   *
   * Execute a trading simulation against historical market data.
   *     
   *     This endpoint accepts a list of trading orders and simulates their execution
   *     against historical OHLCV data for the specified symbol and timeframe.
   *     
   *     The simulation uses deterministic fill logic:
   *     - Market orders are filled at the open price of the entry time bar
   *     - Limit orders are filled when price touches the entry price during or after entry time
   *     - Stop loss and take profit levels are evaluated in candle order (first touch wins)
   *     - Orders that don't meet entry conditions within the simulation window are discarded
   *     
   *     Returns detailed execution results including individual trade outcomes and
   *     performance metrics such as win rate, total PnL, and maximum drawdown.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `simulateTradingApiV1SimulatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  simulateTradingApiV1SimulatePost(params: SimulateTradingApiV1SimulatePost$Params, context?: HttpContext): Observable<SimulationResponse> {
    return this.simulateTradingApiV1SimulatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<SimulationResponse>): SimulationResponse => r.body)
    );
  }

  /** Path part for operation `healthCheckApiV1HealthGet()` */
  static readonly HealthCheckApiV1HealthGetPath = '/api/v1/health';

  /**
   * Health Check.
   *
   * Check if the simulation service is healthy and ready to accept requests.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheckApiV1HealthGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheckApiV1HealthGet$Response(params?: HealthCheckApiV1HealthGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return healthCheckApiV1HealthGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   * Check if the simulation service is healthy and ready to accept requests.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheckApiV1HealthGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheckApiV1HealthGet(params?: HealthCheckApiV1HealthGet$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.healthCheckApiV1HealthGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
