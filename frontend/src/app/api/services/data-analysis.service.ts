/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { analyzeDataCompletenessDataAnalysisCompletenessPost } from '../fn/data-analysis/analyze-data-completeness-data-analysis-completeness-post';
import { AnalyzeDataCompletenessDataAnalysisCompletenessPost$Params } from '../fn/data-analysis/analyze-data-completeness-data-analysis-completeness-post';
import { DataCompletenessResponse } from '../models/data-completeness-response';

@Injectable({ providedIn: 'root' })
export class DataAnalysisService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `analyzeDataCompletenessDataAnalysisCompletenessPost()` */
  static readonly AnalyzeDataCompletenessDataAnalysisCompletenessPostPath = '/data-analysis/completeness';

  /**
   * Analyze Data Completeness.
   *
   * Analyze data completeness for specified symbols and date range.
   *
   * This endpoint provides detailed analysis of data completeness including:
   * - Missing data periods
   * - Validation errors and warnings
   * - Completeness percentages
   * - Recommendations for improvement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `analyzeDataCompletenessDataAnalysisCompletenessPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  analyzeDataCompletenessDataAnalysisCompletenessPost$Response(params: AnalyzeDataCompletenessDataAnalysisCompletenessPost$Params, context?: HttpContext): Observable<StrictHttpResponse<DataCompletenessResponse>> {
    return analyzeDataCompletenessDataAnalysisCompletenessPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Analyze Data Completeness.
   *
   * Analyze data completeness for specified symbols and date range.
   *
   * This endpoint provides detailed analysis of data completeness including:
   * - Missing data periods
   * - Validation errors and warnings
   * - Completeness percentages
   * - Recommendations for improvement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `analyzeDataCompletenessDataAnalysisCompletenessPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  analyzeDataCompletenessDataAnalysisCompletenessPost(params: AnalyzeDataCompletenessDataAnalysisCompletenessPost$Params, context?: HttpContext): Observable<DataCompletenessResponse> {
    return this.analyzeDataCompletenessDataAnalysisCompletenessPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataCompletenessResponse>): DataCompletenessResponse => r.body)
    );
  }

}
